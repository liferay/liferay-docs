<?xml version="1.0"?>

<project name="Dev Site Documentation Management" basedir=".">
	<property name="project.dir" value="../.." />

	<path id="lib.classpath">
		<fileset dir="${project.dir}/lib" includes="*.jar" />
		<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
	</path>

	<path id="project.classpath">
		<path refid="lib.classpath" />
	</path>

	<property environment="env" />

	<property file="../../build.${USERNAME}.properties" />
	<property file="../../build.${user.name}.properties" />
	<property file="../../build.${env.COMPUTERNAME}.properties" />
	<property file="../../build.${env.HOST}.properties" />
	<property file="../../build.${env.HOSTNAME}.properties" />
	<property file="../../build.properties" />

	<property name="build.dir" value="./build"/>
	<property name="dist.dir" value="./dist"/>
	<property name="metadata.filename" value=".METADATA"/>
	<property name="temp.dir" value="temp"/>
	<property name="temp.dir2" value="prepare-temp"/>

	<!-- taskdefs -->

	<taskdef name="checkarticleimgssite" classname="com.liferay.documentation.util.CheckArticleImagesTaskDevSite">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
			<!-- Use below instead of above fileset when testing changes to classes
			<pathelement path="${project.dir}/code/liferay-doc-utils/classes"/>
			-->

			<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<taskdef name="checkimgssite" classname="com.liferay.documentation.util.CheckImagesTaskDevSite">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
			<!-- Use below instead of above fileset when testing changes to classes
			<pathelement path="${project.dir}/code/liferay-doc-utils/classes"/>
			-->

			<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<taskdef name="checkintros" classname="com.liferay.documentation.util.CheckIntrosTask">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
			<!-- Use below instead of above fileset when testing changes to classes
			<pathelement path="${project.dir}/code/liferay-doc-utils/classes"/>
			-->

			<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<taskdef name="convertheaders" classname="com.liferay.documentation.util.ConvertHeadersTask">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
			<!-- Use below instead of above fileset when testing changes to classes
			<pathelement path="${project.dir}/code/liferay-doc-utils/classes"/>
			-->

			<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<taskdef name="convertsidebars" classname="com.liferay.documentation.util.ConvertSidebarsTask">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
			<!-- Use below instead of above fileset when testing changes to classes
			<pathelement path="${project.dir}/code/liferay-doc-utils/classes"/>
			-->

			<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<taskdef name="distdiff" classname="com.liferay.documentation.util.DistDiffTask">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
			<!-- Use below instead of above fileset when testing changes to classes
			<pathelement path="${project.dir}/code/liferay-doc-utils/classes"/>
			-->

			<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<taskdef name="numberimgssite" classname="com.liferay.documentation.util.NumberImagesTaskDevSite">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
			<!-- Use below instead of above fileset when testing changes to classes
			<pathelement path="${project.dir}/code/liferay-doc-utils/classes"/>
			-->

			<fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<taskdef name="concatmarkdown" classname="com.liferay.documentation.util.ConcatMarkdown">
	  <classpath>
	    <fileset dir="${project.dir}/lib" includes="*.jar" />

	    <fileset dir="${project.dir}/code/liferay-doc-utils/lib" includes="*.jar" />
	  </classpath>

	</taskdef>


	<!-- targets -->

	<target name="add-article-to-temp" depends="process-article-to-temp, check-images-dist" description="Processes the article (-Darticle=...) and its parent article structure, adding the target article and all related parent articles and images to temp/">
	</target>

	<target name="article-to-html" depends="prepare, check-article-images" description="Converts a single Markdown article to an HTML file.">
		<echo message="... converting ${article} to html file ${build.dir}/${article}.html"/>
		<java
			classname="com.liferay.documentation.util.MarkdownToHtmlMain"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${article}"/>
			<arg value="${build.dir}/${article}.html"/>
		</java>
	</target>

	<target name="article-to-html-dxp" depends="prepare, check-article-images-dxp" description="Converts a single Markdown DXP article to an HTML file.">
		<echo message="... converting ${article} to html file ${build.dir}/${article}.html"/>
		<java
			classname="com.liferay.documentation.util.MarkdownToHtmlMain"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${article}"/>
			<arg value="${build.dir}/${article}.html"/>
		</java>
	</target>

	<target name="check-headers" description="Check the headers of Markdown articles found in ${doc.dir}/articles">
		<java
			classname="com.liferay.documentation.util.CheckHeadersTask"
			classpathref="project.classpath"
			fork="true"
			failonerror="true"
		>
			<arg value="${doc.dir}"/>
			<arg value="ce"/>
		</java>
	</target>

	<target name="check-headers-dist" description="Check the headers of Markdown articles found in ${doc.dir}/articles and ${doc.dir}/articles-dxp">
		<java
			classname="com.liferay.documentation.util.CheckHeadersTask"
			classpathref="project.classpath"
			fork="true"
			failonerror="true"
		>
			<arg value="${doc.dir}/${temp.dir}"/>
			<arg value="dist"/>
		</java>
	</target>

	<target name="check-headers-dxp" description="Check the headers of Markdown articles found in ${doc.dir}/articles">
		<java
			classname="com.liferay.documentation.util.CheckHeadersTask"
			classpathref="project.classpath"
			fork="true"
			failonerror="true"
		>
			<arg value="${doc.dir}"/>
			<arg value="dxp"/>
		</java>
	</target>

	<target name="concat-markdown" description="Concatenates the Markdown files in a specific folder for preparation to convert to other formats.">
	  <concatmarkdown docdir="${doc.dir}">
	  </concatmarkdown>
	  <move file="./book.markdown" tofile="${dist.dir}/book/text/${doc.dir}.markdown" />
	  <copy todir="${dist.dir}/images">
            <fileset dir="images" includes="*.*"/>
        </copy>
	</target>

	<target name="check" depends="check-images, check-intros, number-headers, number-images, check-headers, check-links" description="Checks for necessary requirements before CE distribution.">

	</target>

	<target name="check-dxp" depends="check-images-dxp, check-intros-dxp, number-headers-dxp, number-images-dxp, check-headers-dxp" description="Checks for necessary requirements before DXP distribution.">

	</target>

	<target name="check-article-images" description="Verifies all images referenced in a single Markdown article.">
		<checkarticleimgssite docdir="${doc.dir}" article="${article}" imagedir="images">
		</checkarticleimgssite>
	</target>

	<target name="check-article-images-dxp" description="Verifies all images referenced in a single Markdown article.">
		<checkarticleimgssite docdir="${doc.dir}" article="${article}" imagedir="images-dxp">
		</checkarticleimgssite>
	</target>

	<target name="check-images" description="Verifies all images referenced in a project's Markdown articles found in ${doc.dir}/articles.">
		<checkimgssite docdir="${doc.dir}" producttype="ce">
		</checkimgssite>
	</target>

	<target name="check-images-dist" description="Verifies all images referenced in a project's Markdown articles.">
		<mkdir dir="${temp.dir}/images"/>
		<checkimgssite docdir="${doc.dir}/${temp.dir}" producttype="dist" resolveimages="true">
		</checkimgssite>
	</target>

	<target name="check-images-dxp" description="Verifies all images referenced in a project's Markdown articles found in ${doc.dir}/articles.">
		<checkimgssite docdir="${doc.dir}" producttype="dxp">
		</checkimgssite>
	</target>

	<target name="check-intros" description="Verifies all Learning Path article folders are accompanied with an introduction Markdown article.">
		<checkintros docdir="${doc.dir}">
		</checkintros>
	</target>

	<target name="check-intros-dist" description="Verifies all Learning Path article folders are accompanied with an introduction Markdown article.">
		<checkintros docdir="${doc.dir}/${temp.dir}">
		</checkintros>
	</target>

	<target name="check-intros-dxp" description="Verifies all Learning Path article folders are accompanied with an introduction Markdown article.">
		<property name="base.filepath" value="${doc.dir}" />
		<mkdir dir="${temp.dir}"/>
		<copy todir="${temp.dir}">
			<fileset dir="${project.dir}/${purpose.dir}/${base.filepath}">
				<include name="articles/**/*.markdown"/>
				<include name="articles-dxp/**/*.markdown"/>
			</fileset>
		</copy>
		<move todir="${temp.dir}/articles" failonerror="false">
			<fileset dir="${temp.dir}/articles-dxp"/>
		</move>
		<checkintros docdir="${doc.dir}/${temp.dir}">
		</checkintros>
		<delete dir="${temp.dir}"/>
	</target>

    <target name="clean-dist" description="Deletes dist directory">
        <echo message="... deleting dist directory"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="clean-images" description="Deletes images from ${doc.dir}/images and ${doc.dir}/images-dxp that are not referenced in any of the markdown files in any subdirectory of ${doc.dir}/articles and ${doc.dir}/articles-dxp">
			<java
				classname="com.liferay.documentation.util.CleanImagesSiteMain"
				classpathref="project.classpath"
				failonerror="true"
				fork="true"
			>
				<arg value="${doc.dir}"/>
			</java>
	</target>

    <target name="clean-temp">
        <delete dir="${temp.dir}"/>
    </target>

	<target name="compare-portal-source" depends="prepare" description="Generates reports comparing a Liferay 6 source directory (-DoldDir) to a Liferay 7+ source directory (-DnewDir).">
		<property name="movedClassesFile" value="${build.dir}/moved-classes.html"/>
		<property name="removedClassesFile" value="${build.dir}/removed-classes.html"/>
		<java
			classname="com.liferay.documentation.movedclassreporter.MovedClassReporterMain"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${oldDir}"/>
			<arg value="${newDir}"/>
			<arg value="${movedClassesFile}"/>
			<arg value="${removedClassesFile}"/>
		</java>
	</target>

	<target name="compare-with-older-branch" description="Compares your current branch with an older branch, specified by -Dolder.branch=someOlderBranch.">
		<java
			classname="com.liferay.documentation.util.GitCompare"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${doc.dir}"/>
			<arg value="${purpose.dir}"/>
			<arg value="${older.branch}"/>
		</java>
	</target>

	<target name="create-metadata-file" description="Builds a metadata file.">
		<!-- Use base.filepath property to distinguish between tutorials and learning-paths directories. The build.xml file
		in the learning-paths directory overwrites this value with "learning-paths/${doc.dir}" -->
		<property name="base.filepath" value="${doc.dir}" />

		<property name="metadata.file" value="${project.dir}/${purpose.dir}/${base.filepath}/${metadata.filename}"/>
		<delete file="${metadata.file}" failonerror="false"/>
		<concat destfile="${metadata.file}">base.source.url=https://github.com/${repo.owner}/${repo.name}/blob/${repo.branch}/${purpose.dir}/${base.filepath}</concat>
	</target>

	<target name="dist-article-ce" depends="clean-temp, add-article-to-temp, dist-temp" description="Creates a ZIP file for importing the specified article (-Darticle=...), its images, and supporting structure to a Knowledge Base.">
	</target>

	<target name="dist-ce" depends="dist-ce-temp, prepare-dist, number-headers" description="Processes the CE articles and images and zips them up for importing.">
		<zip destfile="${dist.dir}/${product.abbrev}-${product.community}-${product.version}-${purpose.dir}-${doc.dir}.zip">
			<fileset dir="${temp.dir}" includes="articles/" />
			<fileset dir="${temp.dir}" includes="images/" />
			<fileset dir="./" includes="${metadata.filename}" />
		</zip>

		<delete dir="${temp.dir}"/>
	</target>

	<target name="convert-headers" description="Converts legacy header IDs to new format. Run this before running the number-headers task for the first time.">
		<convertheaders docdir="${doc.dir}">
		</convertheaders>
	</target>

	<target name="convert-sidebars" description="Converts legacy sidebars to new format.">
		<convertsidebars docdir="${doc.dir}">
		</convertsidebars>
	</target>

	<target name="dist-ce-temp" description="Processes the article tokens and copies the CE articles and images to temp/ for zipping up.">
		<property file="${project.dir}/release-site.properties" />
		<property name="base.filepath" value="${doc.dir}" />
		<mkdir dir="${temp.dir}"/>
		<copy todir="${temp.dir}">
			<fileset dir="${project.dir}/${purpose.dir}/${base.filepath}">
				<include name="articles/**/*.markdown"/>
			</fileset>
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
					<param type="token" name="${product.token}" value="${product.name}"/>
					<param type="token" name="${product.token.app.reference}" value="${product.app.reference}"/>
					<param type="token" name="${product.token.ide}" value="${product.ide.name}"/>
					<param type="token" name="${product.token.platform.reference}" value="${product.platform.reference}"/>
					<param type="token" name="${product.token.version}" value="${product.name.version}"/>
				</filterreader>
			</filterchain>
		</copy>
		<mkdir dir="${temp.dir}/images"/>
		<copy todir="${temp.dir}">
			<fileset dir="${project.dir}/${purpose.dir}/${base.filepath}">
				<include name="images/**"/>
			</fileset>
		</copy>
	</target>

	<target name="dist-dxp" depends="dist-dxp-temp, prepare-dist, number-headers-dxp" description="Processes the article tokens and copies the DXP articles and images to temp/ for zipping up.">
		<zip destfile="${dist.dir}/${product.abbrev}-${product.enterprise}-${product.version}-${purpose.dir}-${doc.dir}.zip">
			<fileset dir="${temp.dir}" includes="articles/" />
			<fileset dir="${temp.dir}" includes="images/" />
			<fileset dir="./" includes="${metadata.filename}" />
		</zip>

		<delete dir="${temp.dir}"/>
	</target>

	<target name="dist-dxp-temp" description="Zips up the folder's CE and DXP articles and images for importing.">
		<property file="${project.dir}/release-site.properties" />
		<property name="base.filepath" value="${doc.dir}" />
		<mkdir dir="${temp.dir}"/>
		<copy todir="${temp.dir}">
			<fileset dir="${project.dir}/${purpose.dir}/${base.filepath}">
				<include name="articles/**/*.markdown"/>
				<include name="articles-dxp/**/*.markdown"/>
			</fileset>
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
					<param type="token" name="${product.token}" value="${product.name.enterprise}"/>
					<param type="token" name="${product.token.app.reference}" value="${product.app.enterprise.reference}"/>
					<param type="token" name="${product.token.ide}" value="${product.ide.name.enterprise}"/>
					<param type="token" name="${product.token.platform.reference}" value="${product.platform.enterprise.reference}"/>
					<param type="token" name="${product.token.version}" value="${product.name.enterprise.version}"/>
				</filterreader>
			</filterchain>
		</copy>
		<mkdir dir="${temp.dir}/images"/>
		<!-- Cannot use filtering for images (due to corruption), so must copy separately -->
		<copy todir="${temp.dir}">
			<fileset dir="${project.dir}/${purpose.dir}/${base.filepath}">
				<include name="images/**"/>
				<include name="images-dxp/**"/>
			</fileset>
		</copy>

		<move todir="${temp.dir}/articles" failonerror="false">
			<fileset dir="${temp.dir}/articles-dxp"/>
		</move>
		<move todir="${temp.dir}/images" failonerror="false">
			<fileset dir="${temp.dir}/images-dxp"/>
		</move>
	</target>

	<target name="dist-diffs" depends="prepare-dist" description="Zips up the document's articles and images that are new or modified, as specified in the git-modified-list.txt file.">
		<mkdir dir="${dist.dir}"/>
		<distdiff docdir="${doc.dir}" purposedir="${purpose.dir}">
		</distdiff>

        <!-- Until the Markdown converter no longer requires intro files that need to be added manually to the diffs.zip, include ALL images in the ZIP. -->
		<zip destfile="${dist.dir}/diffs.zip" update="true">
			<fileset dir="./" includes="images/" />
			<fileset dir="./" includes="${metadata.filename}" />
		</zip>
	</target>

	<target name="dist-temp"  depends="prepare-dist, number-headers" description="Prepares the temp files and zips them up for importing.">
		<property file="${project.dir}/release-site.properties" />
		<zip destfile="${dist.dir}/${product.abbrev}-${product.community}-${product.version}-${purpose.dir}-${doc.dir}.zip">
			<fileset dir="${temp.dir}" includes="articles/" />
			<fileset dir="${temp.dir}" includes="images/" />
			<fileset dir="./" includes="${metadata.filename}" />
		</zip>
	</target>

	<target name="number-headers" description="Numbers the headers of Markdown articles found in ${doc.dir}/articles">
		<property file="${project.dir}/release-site.properties" />
		<java
			classname="com.liferay.documentation.util.NumberHeadersSiteMain"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${doc.dir}"/>
			<arg value="ce"/>
		</java>
	</target>

	<target name="number-headers-dist" description="Numbers the headers of Markdown articles.">
		<property file="${project.dir}/release-site.properties" />
		<java
			classname="com.liferay.documentation.util.NumberHeadersSiteMain"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${doc.dir}/${temp.dir}"/>
			<arg value="dist"/>
		</java>
	</target>

	<target name="number-headers-dxp" description="Numbers the headers of Markdown articles.">
		<property file="${project.dir}/release-site.properties" />
		<java
			classname="com.liferay.documentation.util.NumberHeadersSiteMain"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${doc.dir}"/>
			<arg value="dxp"/>
		</java>
	</target>

	<target name="number-images" description="numbers the images in a markdown chapter file">
		<numberimgssite docdir="${doc.dir}" producttype="ce">
		</numberimgssite>
	</target>

	<target name="number-images-dist" description="Numbers the images of Markdown articles found in ${doc.dir}/articles and ${doc.dir}/articles-dxp.">
		<numberimgssite docdir="${doc.dir}/${temp.dir}" producttype="dist">
		</numberimgssite>
	</target>

	<target name="number-images-dxp" description="Numbers the images of Markdown articles found in ${doc.dir}/articles and ${doc.dir}/articles-dxp.">
		<numberimgssite docdir="${doc.dir}" producttype="dxp">
		</numberimgssite>
	</target>

	<target name="prepare" description="Creates build directory.">
		<!-- Use base.filepath property to distinguish between tutorials and learning-paths directories. The build.xml file
		in the learning-paths directory overwrites this value with "learning-paths/${doc.dir}" -->
		<property name="base.filepath" value="${doc.dir}" />

		<echo message="... creating build directory"/>
		<mkdir dir="${project.dir}/${purpose.dir}/${base.filepath}/${build.dir}"/>
		<touch file="${project.dir}/${purpose.dir}/${base.filepath}/${build.dir}/${article}.html" mkdirs="true"/>
		<mkdir dir="${build.dir}/images"/>
		<copy todir="${build.dir}/images" overwrite="true">
			<fileset dir="./images"/>
		</copy>
		<mkdir dir="${build.dir}/images-dxp"/>
		<copy todir="${build.dir}/images-dxp" overwrite="true">
			<fileset dir="./images-dxp"/>
		</copy>
	</target>

	<target name="prepare-dist" depends="check-images-dist, check-intros-dist, clean-dist, number-headers-dist, number-images-dist, check-headers-dist, create-metadata-file" description="Prepares the document for distribution.">
		<echo message="... creating ${dist.dir} directory"/>
		<mkdir dir="${dist.dir}"/>
	</target>

	<target name="check-links" description="Checks URL links to see if they're broken.">
		<property file="${project.dir}/release-site.properties" />
		<java
			classname="com.liferay.documentation.util.CheckLinks"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${legacy.links}"/>
			<arg value="${api.links}"/>
			<arg value="${doc.dir}"/>
			<arg value="${product.token.platform.reference}"/>
			<arg value="${product.token.app.reference}"/>
			<arg value="${product.platform.reference}"/>
			<arg value="${product.app.reference}"/>
		</java>
	</target>

	<target name="process-article-to-temp"  description="Generates the target article's parent structure and then processes the articles' tokens. The resulting articles are copied (no images) to temp/.">
		<property file="${project.dir}/release-site.properties" />
		<property name="base.filepath" value="${doc.dir}" />
		<mkdir dir="${temp.dir}"/>
		<mkdir dir="${temp.dir2}"/>
		<java
			classname="com.liferay.documentation.util.FindParentIntros"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${article}"/>
			<arg value="${doc.dir}"/>
			<arg value="${temp.dir2}"/>
		</java>
		<copy todir="${temp.dir}">
			<fileset dir="${temp.dir2}"/>
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
					<param type="token" name="${product.token}" value="${product.name}"/>
					<param type="token" name="${product.token.app.reference}" value="${product.app.reference}"/>
					<param type="token" name="${product.token.ide}" value="${product.ide.name}"/>
					<param type="token" name="${product.token.platform.reference}" value="${product.platform.reference}"/>
					<param type="token" name="${product.token.version}" value="${product.name.version}"/>
				</filterreader>
			</filterchain>
		</copy>
		<delete dir="${temp.dir2}"/>
	</target>

	<target name="report-moved-portal-service-classes" depends="prepare" description="Compares two portal source trees to generate an HTML report of classes moved from the portal-service folder.">
		<echo message="... comparing portal-service classes from ${old.src.dir} with those from ${new.src.dir}"/>
		<java
			classname="com.liferay.documentation.movedclassreporter.MovedClassReporterMain"
			classpathref="project.classpath"
			failonerror="true"
			fork="true"
		>
			<arg value="${old.src.dir}"/>
			<arg value="${new.src.dir}"/>
			<arg value="${build.dir}/portal-service-moved-classes.html"/>
		</java>
	</target>
</project>
