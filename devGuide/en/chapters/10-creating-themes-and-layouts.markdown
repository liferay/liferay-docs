# Creating Liferay Themes and Layout Templates [](id=creating-themes-and-layout-templates-liferay-portal-6-2-dev-guide-09-en)

Do you want to transform the look and feel of your Liferay Portal? Create your
own Liferay Theme! Do you want to arrange your pages' portlets differently than
what Liferay's templates support out-of-the-box? Create your own Layout
Template! In this chapter, we'll show you how to do both.

We'll go over the following topics in this chapter:

- Creating Liferay Themes
- Using Developer Mode with Themes
- Creating a Theme Thumbnail
- Designing a Look and Feel
- Understanding Your Theme's JavaScript Callbacks in `main.js`
- Importing Resources with Your Themes
- Creating Liferay Layout Templates
- Embedding Portlets in a Layout Template
- Variables Available to a Layout Template

Let's get started creating Liferay themes.

## Creating Liferay Themes [](id=creating-liferay-themes-liferay-portal-6-2-dev-guide-09-en)

Themes are hot deployable plugins unique to a site served by
the portal. With themes, you can alter the user interface so completely that
it's difficult or impossible to tell that the site is running on Liferay. 

Liferay provides a well organized, modular structure to its themes.  Themes
follow the same philosophy as Liferay configuration: they are modifications, or
differences from the default. Because of this, every line of markup and every
style has a default value that your theme can fall back on if you have chosen
not to customize it. In other words, your theme inherits the styling, images,
and templates from any of the built-in themes. This saves you time and keeps
your themes smaller and less cluttered, because your theme contains only its own
resources, using defaults for the rest, like emoticon graphics for the message
boards portlet. 

Liferay themes are easy to create. You can start by making changes only in the
CSS files. When you need to customize themes more extensively, you can change
the HTML. 

If you hope to become a theme customization guru, there are several technologies
you should know: 

- *CSS:* Create a new theme simply by modifying a CSS file. 
- *Velocity:* Customize the markup generated by the theme.
- *JavaScript:* Add special behaviors to your theme. 
- *XML:* Some theme settings are specified in XML.

To follow the examples in this guide, you should be familiar with the command
line or the Liferay IDE. 

Let's create a theme! 

### Creating a Theme Project [](id=creating-a-theme-project-liferay-portal-6-2-dev-guide-09-en)

The theme creation process is nearly identical to the portlet creation process
that we covered in [Developing Apps with Liferay
IDE](http://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/developing-apps-with-liferay-ide-liferay-portal-6-2-dev-guide-02-en).
Our theme will be named *Deep Blue*, so the
project name (without spaces) is *deep-blue*, and the display name (which can
have spaces) is *Deep Blue*. Let's create the theme using Liferay Developer
Studio first, and then with the terminal. 

***Using Developer Studio:*** 

1.  Go to *File* &rarr; *New* &rarr; *Liferay Project*. 

2.  Fill in *deep-blue* for the Project name and *Deep Blue* for the Display
    name. 

3.  Select the Liferay Plugins SDK and Portal Runtime you've configured. 

4.  Select *Theme* for your Plugin type. 

5.  Click *Next*. 

6.  Select a theme parent. Your theme inherits the parent theme's styling as a
    base from which to build your theme. In addition to the *_styled* theme, you
    can choose to inherit from the *_unstyled* theme, which contains no styling.
    There's also the *classic* theme that has a smooth look and feel and works
    well. For now, select *_styled* as the theme parent. 

7.  Select your theme's framework. You can select the *Freemarker* or *Velocity*
    template frameworks for your theme. Or you can select *JSP* as your theme's
    framework. 

    <!-- Provide better explanation for the concept of the theme framework,
    especially for the JSP value. - Jim -->

8.  Click *Finish*.

![Figure 10.1: Make sure to select the *Theme* plugin type for your theme.](../../images/theme-create-a-theme-project.png)

With Developer Studio, you can create a new plugin project, or if you already
have a project, create a new plugin in an existing project. A single Liferay
project can contain multiple plugins. 

***Using the terminal:*** Navigate to the `themes` directory in the Plugins SDK
and enter the appropriate command for your operating system:

1.  In Linux and Mac OS X, enter

        ./create.sh deep-blue "Deep Blue"

2.  In Windows, enter

        create.bat deep-blue "Deep Blue"

Now there's a blank theme in your `themes` folder, which the Plugins SDK
automatically named by appending "-theme" to your project name. Right now your
theme is empty. Your next step is to set a base theme that serves as the default
for your theme. 

### Setting a Base Theme [](id=setting-a-base-theme-liferay-portal-6-2-dev-guide-09-en)

All themes in Liferay are built on top of two base themes, named *_unstyled* and
*_styled*. Your newly created theme is based on these by default, but they
contain very limited styling. You can take advantage of an *existing* theme's
styling by setting the theme of your choice as the base for your theme.

Base themes are added in layers. First *_unstyled* is added, giving you the core
of the theme, then *_styled*, providing the most basic elements. When you set a
different base theme, it's added on top of *_styled* and overrides the default
styling wherever there are differences. After the base themes are added, your
own custom styling is added on top.

By default, themes are based on the *_styled* theme, which provides only basic
styling of portlets. If you open the `build.xml` file in your theme's directory,
you see the following code:

	<?xml version="1.0"?>
	<!DOCTYPE project>

	<project name="deep-blue-theme" basedir="." default="deploy">
		<import file="../build-common-theme.xml" />

		<property name="theme.parent" value="_styled" />
	</project>

The `theme.parent` property determines the theme your theme inherits its styling
from. In addition to the *_styled* theme, you can choose to inherit from the
*_unstyled* theme, which contains no styling. This makes more work for you, but
offers full flexibility to design your CSS files from scratch. 

You can also use the default Liferay theme **Classic** as a parent theme. You'll
start with a look and feel that's already smooth and works well. But since so
much is already done for you, there's less flexibility when building your
design. It's a compromise between creating a theme as quickly as possible versus
having full control of the result. It's your choice, and another example of the
flexibility Liferay offers.

To specify a base theme, edit the `build.xml` file for your theme and change
*_styled* in `<property name="theme.parent" value="_styled>` to the name of any
existing theme that's installed or in your Plugins SDK.

Now that your base theme is set, let's deploy the theme to your portal instance.

### Deploying the Theme [](id=deploying-the-theme-liferay-portal-6-2-dev-guide-09-en)

If you're already familiar with portlet deployment from reading [Developing Apps
with Liferay IDE](http://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/developing-apps-with-liferay-ide-liferay-portal-6-2-dev-guide-02-en),
theme deployment will be a piece of cake! You can deploy your theme in Developer
Studio or the terminal. 

***Deploying in Developer Studio:*** Click and drag your theme project onto your
server. 

![Figure 10.2: Drag and drop your theme onto the server.](../../images/05-themes-6.png)

Upon deploying, your server outputs messages indicating your plugin is read,
registered, and available for use. 

    Reading plugin package for deep-blue-theme
    Registering themes for deep-blue-theme
    1 theme for deep-blue-theme is available for use

***Deploying in the terminal:*** Open a terminal window in your
`themes/deep-blue-theme` directory and enter

    ant deploy

A BUILD SUCCESSFUL message indicates your theme is now being deployed. If you
switch to the terminal window running Liferay, within a few seconds you will
see the message `1 theme for deep-blue-theme is available for use`.

Let's apply your theme to a page:

1.  Go to your web browser and log in to the portal. 

2.  Click the *Edit* button from the left side menu. 

3. Click the *Look and Feel* tab, select *Deep Blue* beneath the *Available
   Themes* heading, and click *Save*.

Now that you've built and deployed a theme, let's study theme anatomy.

### Anatomy of a Theme Project [](id=anatomy-of-a-theme-project-liferay-portal-6-2-dev-guide-09-en)

Custom themes are created by layering your customizations on top of one of
Liferay's built-in themes. 

The structure of a theme separates different types of resources into easily
accessible folders. Here's the full structure of our Deep Blue theme:

- `deep-blue-theme/`
    - `docroot/`
        - `_diffs/` (subfolders not created by default)
            - `css/`
            - `images/`
            - `js/`
            - `templates/`
        - `css/`
        	- `aui`
        		- (many directories)
        	- `_aui_custom.scss`
        	- `_aui_variables.scss`
        	- `_liferay_custom.scss`
            - `application.css`
            - `aui.css`
            - `base.css`
            - `custom.css`
            - `dockbar.css`
            - `extras.css`
            - `layout.css`
            - `main.css`
            - `navigation.css`
            - `portlet.css`
        - `images/`
            -   (many directories)
        - `js/`
            - `main.js`
        - `templates/`
            - `init_custom.vm`
            - `navigation.vm`
            - `portal_normal.vm`
            - `portal_pop_up.vm`
            - `portlet.vm`
        - `WEB-INF/`
        	- `liferay-look-and-feel.xml`
            - `liferay-plugin-package.properties`

The `_diffs` folder that's created inside the `docroot` directory of your theme
is important; this is where you place your theme's code. The `_diffs` folder
must mirror the parent theme's directory structure. Since you'll only customize
the parts of your theme that differ from the parent theme, place only the
folders and files you'll customize there. 

The other folders inside `docroot` were copied over from the parent theme in
your Liferay bundle when you deployed your theme. Use these files as the basis
for your modifications. For example, to customize the navigation, copy
`navigation.vm` from `deep-blue-theme/docroot/templates/navigation.vm` into the 
`deep-blue-theme/docroot/_diffs/templates` folder (you may have to create this
folder first). You can then open this file and customize it to your liking. 

For custom styles, create a folder named `css` inside your `_diffs` folder and
place a single file there called `custom.css`. This is where you'll define all
your new styles. Because `custom.css` is loaded last, styles defined here
override any styles in the parent theme.

It's a best practice to add your styles only to the `custom.css` file. This
keeps all of your changes in one place and makes future upgrades easier, because
you won't have to manually modify your templates to add support for new Liferay
features. 

Whenever you modify your theme in Developer Studio, redeploy it by
right-clicking your theme (located underneath your server), then selecting
*Redeploy* from the menu. 

![Figure 10.3: Redeploying your theme in Developer Studio is the same as entering the `ant deploy` command for an already deployed plugin.](../../images/05-themes-2.png)

Alternatively, redeploy your theme by opening a terminal, navigating to
`themes/deep-blue-theme` and entering the command

    ant deploy 

Wait a few seconds until the theme deploys, then refresh your browser to see
your changes. 

Would you rather see your changes immediately, rather than having to redeploy to
make your changes visible? Let's talk about Liferay Developer Mode to learn how. 

## Using Developer Mode with Themes [](id=using-developer-mode-with-themes-liferay-portal-6-2-dev-guide-09-en)

Do you want to develop Liferay resources without having to redeploy to see your
portal modifications? Use Liferay Developer Mode! In Developer mode, all caches
are removed, so any changes you make are visible right away. Also, you won't
have to reboot the server as often in Developer Mode.

---

For Liferay v6.1 CE Server or Liferay v6.0 CE Server , you already
 have Developer Mode enabled. When you start your Liferay server for the first time, a 
`portal-ide.properties` file is created in your
 Liferay Portal directory. Within this file, notice the following line:
 `include-and-override=portal-developer.properties`. This automatically
 enables Developer Mode while using Developer Studio or IDE.

For Liferay v6.2 CE Server or greater Developer Mode has been set "Standard" as default, under `portal-ide.properties` file there will be no  `include-and-override=portal-developer.properties` line.Manually change this property in the file could be overwritten by the initial states,so the only way you can swtich to Develper Mode is to go to Studio or IDE and change the setting.As following:


Setup a runtime in Studio or IDE, in the lower left corner double click the server,in the "Liferay settings" section you can change "Server Mode" to "Standard" or "Development(portal-developer.properties)" .Save the changes ,then start server Server mode will be changed. Also you can check under `portal-ide.properties` file. 

![](../../images/set-develop-mode.png)
   
---

Before you use Developer Mode, you'll have to add the
`portal-developer.properties` file to your application server's configuration
file. Each application server has a different configuration file or UI to
specify system properties; so you'll need to find out the specific method for
your application server. Let's demonstrate using the Tomcat application server.

In your `setenv.sh` file (`setenv.bat` in Windows), find the `CATALINA_OPTS`
variable and add the following to the list of options:
    
    -Dexternal-properties=portal-developer.properties

The following is an example of the `CATALINA_OPTS` variable lines with the
`external-properties` option appended to the end (all code must be on one line):

    CATALINA_OPTS=
        "$CATALINA_OPTS
         -Dfile.encoding=UTF8
         -Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES
             =false
         -Duser.timezone=GMT
         -Xmx1024m
         -XX:MaxPermSize=256m
         -Dexternal-properties=portal-developer.properties"

---

 ![tip](../../images/tip-pen-paper.png) **Tip:** If you're already using the
 system property `external-properties` to load other properties files, add
 `portal-developer.properties` to the list and use a comma to separate it from
 other entries.

---

How does Developer Mode let you see your changes more quickly? In Developer
Mode, there are several changes to the normal order of operations. Some of these
key behaviors are listed below, along with the portal property override
settings that trigger them:

- CSS files are loaded individually rather than being combined and loaded as a
  single CSS file (`theme.css.fast.load=false`).
- Layout template caching is disabled (`layout.template.cache.enabled=false`).
- The server does not launch a browser when starting up
  (`browser.launcher.url=`).
- FreeMarker Templates for themes and web content are not cached, so changes
  are applied immediately
  (`freemarker.engine.modification.check.interval=0`). 
- Minification of CSS and JavaScript resources is disabled
  (`minifier.enabled=false`).

Individual file loading of your styling and behaviors, combined with disabled
caching for layout and FreeMarker templates, let's you see your changes
more quickly. 

Now, when you modify your theme's `custom.css` file directly in your Liferay
Bundle, you can see your changes applied as you make them! Make sure you copy
any changes you make back into your `_diffs` folder, or they'll be overwritten
when you redeploy your theme. 

Let's add a thumbnail image for our theme now. 

## Creating a Theme Thumbnail [](id=creating-a-theme-thumbnail-liferay-portal-6-2-dev-guide-09-en)

Now that your theme is available in Liferay, it's time to dress it up for a
stylistic appeal. Currently in the *Look and Feel* settings, your theme's
thumbnail is nonexistent. To remedy this, create a 150 pixels wide by 120
pixels high image to use as your theme's thumbnail. You may want to take a
snapshot of your theme and re-size it to these dimensions. It is very important
to abide by these *exact* dimensions or your image will not display properly as
a thumbnail. Save the image as a `.png` file named `thumbnail.png` and place it
in your theme's `docroot/_diffs/images` directory (create this directory if it
doesn't already exist). On redeployment, your `thumbnail.png` file
automatically displays as your theme's thumbnail.

<!-- Right now, a new theme doesn't have a broken image; there is no image at
all. There is an LPS ticket that suggests that a broken thumbnail be specified
for 6.2 (LPS-39119). We should monitor its status and change the docs, if
necessary. -->

Now go to the *Look and Feel* settings. Your theme's thumbnail should appear
there, along with the *Classic* theme's thumbnail. 

Let's learn how to design a theme's look and feel next. 

## Designing a Look and Feel [](id=designing-a-look-and-feel-liferay-portal-6-2-dev-guide-09-en)

You define a theme's look and feel via a file named `liferay-look-and-feel.xml`
in the `WEB-INF` directory. 

Let's consider how to make your theme configurable to administrative users.

### Making Themes Configurable with Settings [](id=making-themes-configurable-with-settings-liferay-portal-6-2-dev-guide-09-en)

You can define settings to make your theme configurable. Create a file named
`liferay-look-and-feel.xml` in the `WEB-INF` directory (if necessary), with the
following content:

    <?xml version="1.0"?>
    <!DOCTYPE look-and-feel PUBLIC "-//Liferay//DTD Look and Feel 6.2.0//EN"
    "http://www.liferay.com/dtd/liferay-look-and-feel_6_2_0.dtd">

    <look-and-feel>
        <compatibility>
            <version>6.2.0+</version>
        </compatibility>
        <theme id="deep-blue" name="Deep Blue">
            <settings>
                <setting key="my-setting" value="my-value" />
            </settings>
        </theme>
    </look-and-feel>

To define additional settings, add more `<setting>` elements to the file.
Access the settings from the theme templates using the following code:

    $theme.getSetting("my-setting")

Let's say you want to be able to choose from two different page headers (perhaps
one includes more details, while the other is smaller). Instead of creating two
themes that are identical except for some changes in the header, you can create
one and define a setting that lets you choose which header is displayed. 

Make sure you have a `docroot/_diffs/templates` folder created and copy the
`docroot/templates/portal_normal.vm` file into that directory. It's a good rule
of thumb to modify files for your new theme in the `_diffs` folder. Now, open
your `_diffs/templates/portal_normal.vm` template and insert the following:

    #if ($theme.getSetting("header-type") == "detailed")
        #parse ("$full_templates_path/header_detailed.vm")
    #else
        #parse ("$full_templates_path/header_brief.vm")
    #end

If you're following along with this example, you'll need to create the
`header_detailed.vm` and `header_brief.vm` files and place them in the
`_diffs/templates` folder. For this simple tutorial, you can keep these VM
templates blank.

Then, add two different entries in the `liferay-look-and-feel.xml` file
that refer to the same theme, but have different values for the header-type
setting:

    <theme id="deep-blue" name="Deep Blue">
        <settings>
            <setting key="header-type" value="detailed" />
        </settings>
    </theme>
    <theme id="deep-blue-mini" name="Deep Blue Mini">
        <settings>
            <setting key="header-type" value="brief" />
        </settings>
    </theme>

Alternatively, you can make your settings configurable from within Liferay
portal. Use *configurable* settings to let users turn certain theme features on
or off or to allow users to provide input to a theme setting. 

As an example, you can create an option to display a slogan next to your
company's name in the footer of your site's pages:

1. Insert logic into your `portal_normal.vm` template to display a slogan along
   with your company's name (e.g. Nosester) in the footer of your site pages:

        <footer id="footer" role="contentinfo">
            <p>
                #if($theme.getSetting("display-slogan-footer") == true)
                    Nosester $theme.getSetting("slogan")
                #else
                    Nosester
                #end
            </p>
        </footer>

    ---

     ![note](../../images/tip-pen-paper.png) **Note:** Let's look more closely
     at two theme setting variables appearing in the above logic. The
     `display-slogan-footer` variable holds a boolean value indicating whether
     to display the version of the footer that contains your slogan. The
     `slogan` variable holds your slogan text.

    ---

2. Declare the two theme setting variables for the Deep Blue theme in your
   `liferay-look-and-feel.xml`, located in your theme's `WEB-INF` folder:

        <settings>
            <setting configurable="true" 
                     key="slogan" 
                     type="textarea" 
                     value="" 
            />
    
            <setting configurable="true" 
                     key="display-slogan-footer" 
                     type="checkbox" 
                     value="true"
            />
        </settings>

---

 ![tip](../../images/tip-pen-paper.png) **Warning:** Make sure you have an
 up-to-date DTD version specified for your `liferay-look-and-feel.xml` file.
 For example, `http://www.liferay.com/dtd/liferay-look-and-feel_6_2_0.dtd`. When
 referencing older DTD files (e.g., 6.0.0), the slogan settings are unavailable.
 
---

The portal administrator can enter a slogan and activate it for the portal via
the *Look and Feel* section of the *Site Administration* &rarr; *Site Pages*
panel (see the *Creating and Managing Pages* section of [Using Liferay
Portal](https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/leveraging-liferays-multi-site-capabili-liferay-portal-6-2-user-guide-02-en)).

![Figure 10.4: Setting the footer display slogan in the *Look and Feel* of the site's page settings.](../../images/themes-custom-configurable-setting.png)

When the portal administrator saves the settings, your site's pages show the new
footer, including the slogan. 

![Figure 10.5: The slogan displayed in the page footer.](../../images/themes-custom-configurable-setting-displayed.png)

---

 ![note](../../images/tip-pen-paper.png) **Note:** Use a language properties
 hook to display configurable theme settings properly, like the slogan text area
 and footer checkbox from the previous example. For details, see the [Overriding
 a *Language.properties*
 File](https://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/override-a-language-properties-hook-liferay-portal-6-2-dev-guide-en)
 section found in the *Hooks* chapter of this guide.

---

Next, let's customize your theme's color scheme. 

### Specifying Color Schemes [](id=specifying-color-schemes-liferay-portal-6-2-dev-guide-09-en)

Specify color schemes with a CSS class name, which of course also lets you
choose different background images, different border colors, and more. 

Here's how you can define your color schemes in `liferay-look-and-feel.xml`:

    <theme id="deep-blue" name="Deep Blue">
        <settings>
            <setting key="my-setting" value="my-value" />
        </settings>
        <color-scheme id="01" name="Day">
            <css-class>day</css-class>
            <color-scheme-images-path>
                ${images-path}/color_schemes/${css-class}
            </color-scheme-images-path>
        </color-scheme>
        <color-scheme id="02" name="Night">
            <css-class>night</css-class>
        </color-scheme>
    </theme>

In your `_diffs/css` folder, create a `color_schemes` folder and place a `.css`
file in it for each color scheme. In the case above, we can have either one file
called `night.css`, letting the default styling handle the first color scheme,
or we can use both `day.css` and `night.css` to specify each scheme. Let's use
the latter option here, creating both files to define our color schemes.

Place the following lines at the bottom of your `docroot/css/custom.css` file:

    @import url(color_schemes/day.css);
    @import url(color_schemes/night.css);

The color scheme CSS class is placed on the `<body>` element, so you can use it
to identify your styling. In `day.css`, prefix all your CSS styles like this:

    body.day { background-color: #ddf; }
    .day a { color: #66a; }

In `night.css`, prefix all your CSS styles like this:

    body.night { background-color: #447; color: #777; }
    .night a { color: #bbd; }

You can create separate thumbnail images for your color schemes. The
`<color-scheme-images-path>` element tells Liferay where to look for these
images (you only have to place this element in one color scheme for it to affect
both). For our example, create the folders `_diffs/images/color_schemes/day` and
`_diffs/images/color_schemes/night`. In each folder place a `thumbnail.png` and
`screenshot.png` file, according to the specifications defined in the Thumbnails
section above. 

Let's review the predefined settings available for your theme. 

### Leveraging Portal Predefined Settings [](id=leveraging-portal-predefined-settings-liferay-portal-6-2-dev-guide-09-en)

The portal defines some settings that allow the theme to determine certain
behaviors. As of this writing, predefined settings are only available for
portlet borders, bullet styles, and the site name, but more settings may be
added in the future. Modify these settings from the `liferay-look-and-feel.xml`
file. Remember, your `liferay-look-and-feel.xml` file should have the 6.2.0
doctype for the following predefined settings to work correctly.

---

 ![note](../../images/tip-pen-paper.png) **Note:** To override default behavior
 for individual portlets, you can modify the a portlet's `liferay-portlet.xml`
 file.

---

Let's get on with learning about predefining settings using themes. First, let's
take a look at settings for portlet borders. 

#### Portlet Borders [](id=portlet-borders-liferay-portal-6-2-dev-guide-09-en)

The theme turns on portlet borders, by default. But you can turn them off by
setting `portlet-setup-show-borders-default` to `false` in your theme's
`liferay-look-and-feel.xml` file. For example, the following setting, makes
border display configurable for the portal administrator, and disables showing
the borders as the default:

    <settings>
        ...
        <setting
            configurable="true"
            key="portlet-setup-show-borders-default"
            type="checkbox"
            value="false"
        />
        ...
    </settings>

Now that you've configured portlet borders, let's configure bullet styles
used in your sites. 

#### Bullet Styles [](id=bullet-styles-liferay-portal-6-2-dev-guide-09-en)

Liferay's Navigation portlet can be configured to use any bullet styles
inherited by your theme or implemented in your theme. For example, if your
theme uses Liferay's *classic* theme as its base parent, you can leverage its
*arrows* bullet style. Here is the arrow bullet style's class from the
*classic* theme's `_diffs/css/custom.css` file:

    .nav-menu-style-arrows ul {
    list-style-image: url(@theme_image_path@/navigation/bullet_selected.png);
    }

You can make this bullet style, along with any bullet styles you implement,
available for site administrators to use in their site's Navigation portlet.
Just follow the naming convention as demonstrated below, substituting `[bullet
style name]`, with your bullet style's name:

    .nav-menu-style-[bullet style name] ul {
        ... CSS selectors ...
    }

Then, make the `bullet-style` setting configurable in your
`liferay-look-and-feel.xml` file. From this setting, list optional bullet styles
you want available to site administrators, and set a default bullet style as
well:

    <settings>
        ...
        <setting
            configurable="true"
            key="bullet-style"
            options="arrows,dots,classic,modern
            value="dots"
        />
        ...
    </settings>

Your site administrators can now choose the bullet style to apply to the
Navigation portlet. They select it from the site's *Look and Feel* control
page. 

Using CSS, and maybe some unobtrusive JavaScript, you can create a navigation
menu that looks just the way you want it. Next, let's take a look at how to
configure display your site's name. 

#### Site Names [](id=displaying-site-name-via-theme-liferay-portal-6-2-dev-guide-en)

The site name settings let site administrators decide whether to display a
site's name (i.e., title). But, if you are using a logo that mentions your
company or site on each site page, you may find the default site name display
distracting.

![Figure 10.6: By default, themes display the site's title on each page.](../../images/theme-site-name.png)

Since the themes you create in the Plugins SDK use Liferay's *_unstyled* theme
as a base theme, you have the following settings available for configuring site
name display:

- `show-site-name-default` configures site name display and lets you turn it
  on/off by default. 
- `show-site-name-supported` configures support for site name display and lets
  you turn it on/off by default. 

Here is how you might specify them in your `liferay-look-and-feel.xml` file:

    <settings>
        ...
        <setting
            configurable="true"
            key="show-site-name-default"
            type="checkbox"
            value="true"
        />
        <setting
            configurable="true"
            key="show-site-name-supported"
            type="checkbox"
            value="true"
        />
        ...
    </settings>

With these settings configurable, site administrators can control site name
display from the each site's *Look and Feel* tab, which can be found by clicking
the *Edit* button from the left side menu of any page.
 
Let's talk about Liferay's JavaScript library next. 

## Understanding Your Theme's JavaScript Callbacks in *main.js* [](id=themes-javascript-callbacks-main-js-liferay-portal-6-2-dev-guide-en)

Liferay has its own JavaScript library called AlloyUI, an extension to Yahoo's
YUI3 framework. You can take advantage of AlloyUI or YUI3 in your themes. Inside
your theme's `main.js` file, you'll find definitions for three JavaScript
callbacks:

- **AUI().ready(fn):** Executed after the HTML in the page has finished loading
  (minus any portlets loaded via AJAX). 
- **Liferay.Portlet.ready(fn):** Executed after each portlet on the page has
  loaded. The callback receives two parameters: `portletId` and `node`.
  `portletId` is the ID of the portlet that was just loaded. `node` is the Alloy
  Node object of the same portlet. 
- **Liferay.on('allPortletsReady', fn):** Executed after everything else
  (including AJAX portlets) has finished loading. 

The contents of the `main.js` file are listed below:

	AUI().ready(

		/*
		This function gets loaded when all the HTML, not including the portlets, is
		loaded.
		*/

		function() {
		}
	);

	Liferay.Portlet.ready(

		/*
		This function gets loaded after each and every portlet on the page.

		portletId: the current portlet's id
		node: the Alloy Node object of the current portlet
		*/

		function(portletId, node) {
		}
	);

	Liferay.on(
		'allPortletsReady',

		/*
		This function gets loaded when everything, including the portlets, is on
		the page.
		*/

		function() {
		}
	);

Want to learn how to import resources with your theme? We'll discuss how you can
do this in the next section.

## Importing Resources with Your Themes [](id=importing-resources-with-your-themes-liferay-portal-6-2-dev-guide-09-en)

A theme without content is like an empty house. If you're trying to sell an
empty house, it may be difficult for prospective buyers to see its full beauty.
However, staging the house with some furniture and decorations helps prospective
buyers imagine what the house might look like with their belongings. Liferay's
resources importer application is a tool that allows a theme developer to have
files and web content automatically imported into the portal when a theme is
deployed. Usually, the resources are imported into a site template but they can
also be imported directly into a site. Portal administrators can use the site or
site template created by the resources importer to showcase the theme. This is a
great way for theme developers to provide a sample context that optimizes the
design of their theme. In fact, all standalone themes that are uploaded to
Liferay Marketplace must use the resources importer. This ensures a uniform
experience for Marketplace users: a user can download a theme from Marketplace,
install it on their portal, go to Sites or Site Templates in the Control Panel
and immediately see their new theme in action. In this section, we discuss how
to include resources with your theme.

Liferay's welcome theme includes resources that the resources importer
automatically deploys to the default site. (Note: The welcome theme is only
applied out-of-the-box in Liferay CE.) The welcome theme and the pages and
content that it imports to the default site provide a good example of the
resources importer's functionality.

![Figure 10.7: The welcome theme uses the resources importer to import pages and content to the default site of a fresh Liferay installation.](../../images/welcome-theme.png)

If it's not already installed, you can download the resources importer
application from Liferay Marketplace. Search for either *Resources Importer CE*
or *Resources Importer EE*, depending on your Liferay Portal platform, and
download the latest version. Install and deploy the resources importer to your
Liferay instance the same way you would deploy any other Liferay plugin or
Marketplace app.

---

 ![Tip](../../images/tip-pen-paper.png) **Tip:** If you deploy a theme to your
 Liferay Portal instance and don't have the resources importer already deployed,
 you might see a message like this:
 
    19:21:12,224 INFO  [pool-2-thread-2][HotDeployImpl:233] Queuing test-theme for deploy because it is missing resources-importer-web

 Such a message appears if the resources importer is declared as a dependency in
 your theme's `liferay-plugin-package.properties` file but is not deployed. You
 can deploy the resources importer application to satisfy the dependency or you
 can remove or comment out the dependency declaration if you're not going to use
 the resources importer with your theme (see below).

---

When you create a new theme project using the Liferay Plugins SDK, check your
theme's `docroot/WEB-INF/liferay-plugin-package.properties` file for two entries
related the resources importer. One or both of these might be commented out or
missing, depending on the version of your Plugins SDK:

    required-deployment-contexts=\
        resources-importer-web

    resources-importer-developer-mode-enabled=true

The first entry, `required-deployment-contexts=resources-importer-web`, declares
your theme's dependency on the resources importer plugin. If you're not going to
use the resources importer with your theme and don't want to deploy the
resources importer, you can remove or comment out this entry. The second entry,
`resources-importer-developer-mode-enabled=true`, is a convenience feature for
theme developers. With this setting enabled, if the resources are to be imported
to a site template that already exists, the site template is recreated and
reapplied to sites using the site template. Otherwise, you have to manually
delete the sites built using the resource importer's site template each time you
change anything in your theme's `docroot/WEB-INF/src/resources-importer` folder.

If you'd like to import your theme's resources directly into a site, instead of
into a site template, you can specify the following in your
`liferay-plugin-package.properties` file:

    resources-importer-target-class-name=com.liferay.portal.model.Group

    resources-importer-target-value=<site-name>

---

 ![warning](../../images/tip-pen-paper.png) **Warning:** If you're developing
 themes for Liferay Marketplace, don't configure your theme to import resources
 directly into a site. Instead, use the default: import the resources into a
 site template. Do this by commenting out the
 `resources-importer-target-class-name` property. This way, it'll be much safer
 to deploy your theme to a production Liferay instance.

---

All of the resources a theme uses with the resources importer go in the
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. The assets to be
imported by your theme should be placed in the following directory structure:

- `<theme-name>/docroot/WEB-INF/src/resources-importer/`
    - `sitemap.json` - defines the pages, layout templates, and portlets
    - `assets.json` - (optional) specifies details on the assets
    - `document_library/`
        - `documents/` - contains documents and media files
    - `journal/`
        - `articles/` - contains web content (HTML) and folders grouping web
          content articles (XML) by template. Each folder name must match the
          file name of the corresponding template. For example, create folder
          `Template 1/` to hold an article based on template file
          `Template 1.vm`. 
        - `structures/` - contains structures (XML) and folders of child
          structures. Each folder name must match the file name of the
          corresponding parent structure. For example, create folder
          `Structure 1/` to hold a child of structure file `Structure 1.xml`.
        - `templates/` - groups templates (VM or FTL) into folders by structure.
          Each folder name must match the file name of the corresponding
          structure. For example, create folder `Structure 1/` to hold a
          template for structure file `Structure 1.xml`.

When you create a new theme using the Liferay Plugins SDK
(liferay-plugins-sdk-6.1.1-ce-ga2-20121004092655026 or later), this folder
structure is created automatically. Also, a default `sitemap.json` file is
created and a default
`liferay-plugin-package.properties` file is created in the `WEB-INF` folder.

You have two options for specifying resources to be imported with your theme.
The recommended approach is to add resource files to the folders outlined above
and to specify the contents of the site or site template in a `sitemap.json`
file (described below). Alternatively, you can use an `archive.lar` file to
package the resources you'd like your theme to deploy. To create such an
`archive.lar`, just export the contents of a site from Liferay Portal using the
site scope. Then place the `archive.lar` file in your theme's
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. If you choose to
use an archive file to package all of your resources, you won't need a
`sitemap.json` file or any other files in your
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. Note, however, a
LAR file is version-specific; it won't work on any version of Liferay other than
the one from which it was exported. For this reason, using a `sitemap.json` file
to specify resources is the most flexible approach. If you're developing themes
for Liferay Marketplace, you should use the `sitemap.json` to specify resources
to be imported with your theme.

The `sitemap.json` in the `<theme-name>/docroot/WEB-INF/src/resources-importer`
folder specifies the site pages, layout templates, web content, assets, and
portlet configurations provided with the theme. This file describes the contents
and hierarchy of the site for Liferay to import as a site or site template. Even
if you're not familiar with JSON, the `sitemap.json` file is easy to understand.
Let's examine a sample `sitemap.json` file:

    {
	"layoutTemplateId": "2_columns_ii",
	"privatePages": [
	    {
	        "friendlyURL": "/private-page",
		"name": "Private Page",
		"title": "Private Page"
	    }
	],
	"publicPages": [
            {
                "columns": [
                    [
                        {
                            "portletId": "58"
                        },
                        {
                            "portletId": "71"
                        },
                        {
                            "portletId": "56",
                            "portletPreferences": {
                                "articleId": "Without Border.html",
                                "groupId": "${groupId}",
                                "portletSetupShowBorders": "false"
                            }
                        },
                        {
                            "portletId": "56",
                            "portletPreferences": {
                                "articleId": "Custom Title.html",
                                "groupId": "${groupId}",
                                "portletSetupShowBorders": "true",
                                "portletSetupTitle_en_US":
                                    "Web Content Display with Custom Title",
                                "portletSetupUseCustomTitle": "true"
                            }
                        }
                    ],
                    [
                        {
                            "portletId": "47"
                        },
                        {
                            "portletId": "71_INSTANCE_${groupId}",
                            "portletPreferences": {
                                "displayStyle": "[custom]",
                                "headerType": "root-layout",
                                "includedLayouts": "all",
                                "nestedChildren": "1",
                                "rootLayoutLevel": "3",
                                "rootLayoutType": "relative"
                            }
                        },
                        "Web Content with Image.html",
                        {
                            "portletId": "118",
                            "portletPreferences": {
                                "columns": [
                                    [
                                        {
                                            "portletId": "56",
                                            "portletPreferences": {
                                                "articleId":
                                                    "Child Web Content 1.xml",
                                                "groupId": "${groupId}",
                                                "portletSetupShowBorders": "true",
                                                "portletSetupTitle_en_US":
                                                    "Web Content Display with 
                                                        Child Structure 1",
                                                "portletSetupUseCustomTitle": "true"
                                            }
                                        }
                                    ],
                                    [
                                        {
                                            "portletId": "56",
                                            "portletPreferences": {
                                                "articleId":
                                                    "Child Web Content 2.xml",
                                                "groupId": "${groupId}",
                                                "portletSetupShowBorders": "true",
                                                "portletSetupTitle_en_US":
                                                    "Web Content Display with 
                                                        Child Structure 2",
                                                "portletSetupUseCustomTitle": "true"
                                            }
                                        }
                                    ]
                                ],
                                "layoutTemplateId": "2_columns_i"
                            }
                        }
                    ]
                ],
                "friendlyURL": "/home",
                "nameMap": {
                    "en_US": "Welcome",
                    "fr_CA": "Bienvenue"
                },
                "title": "Welcome"
            },
            {
                "columns": [
                    [
                        {
                            "portletId": "58"
                        }
                    ],
                    [
                        {
                            "portletId": "47"
                        }
                    ]
                ],
                "friendlyURL": "/parent-page",
                "layouts": [
                    {
                        "friendlyURL": "/child-page-1",
                        "name": "Child Page 1",
                        "title": "Child Page 1"
                    },
                    {
                        "friendlyURL": "/child-page-2",
                        "name": "Child Page 2",
                        "title": "Child Page 2"
                    }
                ],
                "name": "Parent Page",
                "title": "Parent Page"
            },
            {
                "friendlyURL": "/hidden-page",
                "name": "Hidden Page",
                "title": "Hidden Page",
                "hidden": "true"
            }
        ]
    }

The first thing you should declare in your `sitemap.json` file is a layout
template ID so the target site or site template can reference the layout
template to use for its pages. You can also specify different layout templates
to use for individual pages. You can find layout templates in your Liferay
installation's `/layouttpl` folder. Next, you have to declare the layouts, or
pages, that your site template should use. Note that pages are called *layouts*
in Liferay's code. You can specify a name, title, and friendly URL for a page,
and you can set a page to be hidden. To declare that web content should be
displayed on a page, simply specify an HTML file. You can declare portlets by
specifying their portlet IDs which can be found in Liferay's
`WEB-INF/portlet-custom.xml` file. You can also specify portlet preferences for
each portlet.

Optionally, you can create an `assets.json` file in your
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. While the
`sitemap.json` file defines the pages of the site or site template to be
imported, along with the layout templates, portlets, and portlet preferences of
these pages, the `assets.json` file specifies details about the assets to be
imported. Tags can be applied to any asset. Abstract summaries and small images
can be applied to web content articles. For example, the following `assets.json`
file specifies two tags for the `company_logo.png` image, one tag for the
`Custom Title.html` web content article, and an abstract summary and small image
for the `Child Web Content 1.xml` article structure:

    {
        "assets": [
            {
                "name": "company_logo.png",
                "tags": [
                    "logo",
                    "company"
                ]
            },
            {
                "name": "Custom Title.html",
                "tags": [
                    "web content"
                ]
            },
            {
                "abstractSummary": "This is an abstract summary.",
                "name": "Child Web Content 1.xml",
                "smallImage": "company_logo.png"
            }
        ]
    }

Now that you've learned about the directory structure for your resources, the
`sitemap.json` file for referencing your resources, and the `assets.json` file
for describing the assets of your resources, it's time to put resources into
your theme. You can create resources from scratch and/or bring in resources that
you've already created in Liferay. Let's go over how to leverage your HTML
(basic web content), XML (structures), or VM or FTL (templates) files from
Liferay:

- **web content (basic):** Edit the article, click *Source*, and copy its
  contents into an HTML file in the `resources-importer/journal/articles/`
  folder.
- **web content (based on structure and template):** Edit the article, click
  *Download* to download it as a file `article.xml`. Create a folder for the
  template under `resources-importer/journal/articles/`, rename the downloaded
  `article.xml` file as desired, and copy it into the folder for the template.
  The web content article's XML fills in the data required by the structure.
- **structure:** Edit the structure by clicking *Source*, and copy and paste its
  contents into a new XML file for the structure in the
  `resources-importer/journal/structures/` folder. The structure XML sets a
  wireframe, or blueprint, for an article's data. 
- **template:** Edit the template by clicking *Source*, and copy and paste its
  contents into a new XML file for the template in the
  `resources-importer/journal/templates/` folder. The template defines how the
  data should be displayed.

<!-- *Download* button is currently unavailable for Web Content (based on
structure and template). Contacted Juan for more info and following LPS-31355
-->

Here is an outline of steps you can use in developing your theme and its
resources:

1.  Create your theme.

2.  Add your resources under the
   `<theme-name>/docroot/WEB-INF/src/resources-importer` folder and its
   subfolders.

3.  Create a `sitemap.json` file in your `resources-importer/` folder. In this
    file, define the pages of the site or site template to be imported, along
    with the layout templates, portlets, and portlet preferences of these pages.

4.  Create an `assets.json` file in your `resources-importer/` folder.  In this
    file, specify details of your resource assets.

5.  In your `liferay-plugin-package.properties` file, include
    `resources-importer-web` in your `required-deployment-contexts` property's
    list and set `resources-importer-developer-mode-enabled=true`. For the
    `resources-importer-target-value` property, specify the name of the site or
    site template into which you are importing or comment it out to use the
    theme's name. For the `resources-importer-target-class-name` property,
    comment it out to import to a site template or set it to
    `com.liferay.portal.model.Group` to import directly into a site.

6.  Deploy your plugin into your Liferay instance.

7.  View your theme, and its resources, from within Liferay. Log in to your
    portal as an administrator and check the Sites or Site Templates section of
    the Control Panel to make sure that your resources were deployed correctly.
    From the Control Panel you can easily view your theme and its resources:

    - If you imported into a site template, select its *Actions* &rarr; *View
      Pages* to see it.
    - If you imported directly into a site, select its
      *Actions* &rarr; *Go to Public Pages* to see it.

You can go back to any of the beginning steps in this outline to make
refinements. It's just that easy to develop a theme with resources intact!

To see a simple working example of the resources importer in action, visit
[https://github.com/liferay/liferay-docs/tree/master/devGuide/code/test-resources-importer-theme-6.1.1.1.war](https://github.com/liferay/liferay-docs/tree/master/devGuide/code/test-resources-importer-theme-6.1.1.1.war).
This is just the classic Liferay theme with some sample resources added. If
you're interested in extending the functionality of the resources-importer
application, you can use the test-resources-importer-portlet to check that you
aren't breaking existing functionality. The test-resources-importer-portlet is
available on Github here:
[https://github.com/liferay/liferay-plugins/tree/master/portlets/test-resources-importer-portlet](https://github.com/liferay/liferay-plugins/tree/master/portlets/test-resources-importer-portlet).
The sample resources included in the test-resources-importer-theme are the same
ones included in the test-resources-importer-portlet. If you'd like to examine
another example, check out the code for Liferay's welcome theme:
[https://github.com/liferay/liferay-plugins/tree/master/themes/welcome-theme](https://github.com/liferay/liferay-plugins/tree/master/themes/welcome-theme).
Note that this theme imports resources directly into the default site.
Typically, this won't be something you'll need to do; instead, you'll usually
have your theme's resources imported into a site template. For further examples,
please examine the Zoe themes which you can find on Github here
[https://github.com/liferay/liferay-plugins/tree/master/themes](https://github.com/liferay/liferay-plugins/tree/master/themes)
and which you can download from Liferay Marketplace.

As promised, we'll show you how to create Layout Templates next. 

## Creating Liferay Layout Templates [](id=creating-liferay-layout-templates-liferay-portal-6-2-dev-guide-09-en)

By now, you've likely added portlets to a page by dragging them from the *Add*
menu and dropping them into place. Are there times, though, when you find
yourself limited by Liferay's page layout options? Maybe your Feng Shui
(pronounced *fung SHWAY*) senses are picking up on some negative energy? Or
perhaps you find yourself adding the same portlets over and over again onto the
same types of pages? Don't despair! Break the monotony by creating your own
custom layout templates. Layout template plugins let you design layouts that
flow nicely, embed commonly used portlets, and apply CSS, Velocity, and HTML to
make your pages visually pop. 

Let's create a custom layout template!

### Creating a Layout Template Project [](id=creating-a-layout-template-project-liferay-portal-6-2-dev-guide-09-en)

With the Plugins SDK, you can deploy layout templates as plugins, and creating
layout templates with Liferay Developer Studio is easier than ever. Let's create
a layout template called *Columns 1 4 1*. 

***Using Developer Studio:*** 

1.  Go to *File* &rarr; *New* &rarr; *Liferay Plugin Project*. 

2.  Enter *columns-1-4-1* for the Project name and *Columns 1 4 1* for the
    Display name.
    
3.  Choose whichever build type you prefer (Ant or Maven) and select the
    appropriate *Plugins SDK* and *Liferay runtime*. 

4.  Select *Layout Template* as your plugin type. 

5.  Click *Finish*. 

![Figure 10.8: Creating a new layout template project is easy with Liferay Developer Studio.](../../images/layout-template-new-project.png)

***Using the terminal:*** Navigate to your Plugins SDK's `layouttpl` folder,
and execute the *create* script in your terminal. Here's the generic version of
the *create* script, followed by operating system-specific commands:

    ./create.[sh|bat] <project-name> "<layout template title>"

1.  Example in Linux and Mac OS X:

        ./create.sh columns-1-4-1 "Columns 1 4 1"

2.  Example in Windows:

        create.bat columns-1-4-1 "Columns 1 4 1"

Developer Studio's *New Project* wizard and the *create* scripts generate layout
template projects in your Plugin SDK's `layouttpl` folder. Layout template
project names must end with *-layouttpl* so when you enter *columns-1-4-1* for
the project name, *-layouttpl* is automatically appended to the project name.

### Anatomy of a Layout Template Project [](id=anatomy-of-a-layout-template-project-liferay-portal-6-2-dev-guide-09-en)

Let's look at the directory structure of a layout template project and learn
about its various files:

- `columns-1-4-1-layouttpl/`
	- `docroot/`
		- `META-INF/`
		- `WEB-INF/`
			- `liferay-layout-templates.xml`
			- `liferay-plugin-package.properties`
		- `columns_1_4_1.png`
		- `columns_1_4_1.tpl`
		- `columns_1_4_1.wap.tpl`
	- `build.xml`

Navigate to your Plugins SDK's `layouttpl/` folder and you'll see that the
Plugins SDK automatically appended *-layouttpl* to your project's name. A layout
template project can contain multiple layout templates. The directory structure
is the same, but you'll have a `.png`, `.tpl`, and `.wap.tpl` file for each
layout template in the `docroot/` folder. The `liferay-*` files describe the
layout templates for packaging and deployment. 

Now that you're well-versed on the anatomy of a layout template, let's explore
the layout template files.

### Layout Template Files [](id=layout-template-files-liferay-portal-6-2-dev-guide-09-en)

One or more layout template plugins can reside in a layout template project.
Let's see what each template file does: 

- `[project-name].tpl`: Generates the HTML structure of the template. 
- `[project-name].wap.tpl`: Variant template for mobile devices. WAP stands for
  wireless application protocol. 
- `[project-name].png`: Thumbnail representation of the template that you see in
  Liferay Portal from the Page Layout screen. You'll have to create the
  thumbnail image, but you can use the default PNG for layout templates as a
  starting point.

![Figure 10.9: This is an example of a default layout template thumbnail.](../../images/blank_columns.png)

Let's move on to Liferay configuration files.

### Liferay Configuration Files [](id=liferay-layout-configuration-files-liferay-portal-6-2-dev-guide-09-en)

In addition to the three template-specific files, a layout template project has
two Liferay configuration files:

- `liferay-layout-templates.xml`: Specifies the name of the layout templates and
  the location of their TPL and PNG files. 
- `liferay-plugin-package.properties`: Describes the plugin project to Liferay's
  hot deployer. 

Now that you're familiar with the layout template's files and directory
structure, let's deploy a layout template on the server. 

### Deploying Layout Templates [](id=deploying-layout-templates-liferay-portal-6-2-dev-guide-09-en)

If you've ever deployed a theme or portlet, you already know how to deploy
layout templates! Use Developer Studio or the terminal to deploy your layout
templates:

- ***Deploying in Developer Studio:*** Drag your layout template project onto
  your server. 
- ***Deploying in the terminal:*** If you're using Ant, execute the following
  command From your layout template project directory:

        ant deploy

    If you're using Maven, please refer to this guide's
    [section](https://www.liferay.com/documentation/liferay-portal/6.1/development/-/ai/deploying-liferay-plugins-with-maven)
    on deploying  Liferay plugins with Maven.

When deploying your plugin, the server displays messages indicating that your
plugin was read, registered, and is now available for use. 

Example server output:

    Reading plugin package for columns-1-4-1-layouttpl
    Registering layout templates for columns-1-4-1-layouttpl
    1 layout template for columns-1-4-1-layouttpl is available for use

Wait a minute! We can deploy the template, but we still haven't designed it.
We'll need to add content to the TPL files that were generated when we created
our layout template. 

### Designing a Layout Template [](id=designing-a-layout-template-liferay-portal-6-2-dev-guide-09-en)

Initially, the layout template's generated TPL files are empty, a fresh canvas
on which you can design layout templates. If this seems overwhelming, don't
worry. We'll build a new layout template and explain how it works. If you want
to see more examples, check out the Page Layouts section of [Liferay Marketplace](www.liferay.com/marketplace),
download some CE layout templates provided by Liferay, and examine the source.
You also can examine Liferay's core layout templates. These can be found in
Liferay's source in the `liferay-portal/portal-web/docroot/layouttpl/custom/`
folder.

Let's describe the layout template that we're about to create. We named it
*Columns 1 4 1* because we want the first row to have just one column, the
second row to have 4 (equal width) columns, and the third row to have just one
column. Liferay provides a similar layout template called *1-2-1 Columns Layout
CE* on Liferay Marketplace. Here's the source of the 1-2-1 Columns Layout
template:

    <div class="columns-1-2-1" id="main-content" role="main">
            <div class="portlet-layout row-fluid">
                    <div class="portlet-column portlet-column-only span12" id="column-1">
                            $processor.processColumn("column-1", "portlet-column-content portlet-column-content-only")
                    </div>
            </div>

            <div class="portlet-layout row-fluid">
                    <div class="portlet-column portlet-column-first span8" id="column-2">
                            $processor.processColumn("column-2", "portlet-column-content portlet-column-content-first")
                    </div>

                    <div class="portlet-column portlet-column-last span4" id="column-3">
                            $processor.processColumn("column-3", "portlet-column-content portlet-column-content-last")
                    </div>
            </div>

            <div class="portlet-layout row-fluid">
                    <div class="portlet-column portlet-column-only span12" id="column-4">
                            $processor.processColumn("column-4", "portlet-column-content portlet-column-content-only")
                    </div>
            </div>
    </div>

A CSS class named after the layout template project must be applied to the root
`<div>`: `class="columns-1-2-1"`. An ID of *main-content* and a role of *main*
must also be applied to the root `<div>`.

Inside of the root `<div>`, you need to create `<div>`s for each row of your
layout template. You must apply the *portlet-layout* and *row-fluid* CSS classes
to these `<div>`s: `<div class="portlet-layout row-fluid">`.

Inside each row `<div>`, you must specify one or more column `<div>`s. For each
column `<div>`, make sure to specify the *portlet-column* CSS class. If a column
is the first, last, or only column in a row, you must specify another CSS class:
*portlet-column-first*, *portlet-column-last*, or *portlet-column-only*.

Liferay 6.2 themes use a fork of Twitter Bootstrap called Alloy Bootstrap:
[https://github.com/liferay/alloy-bootstrap](https://github.com/liferay/alloy-bootstrap)
Alloy Bootstrap affects Liferay's layout templates as well as its themes.
Liferay 6.2 layout templates use Bootstrap's 12 column grid system:
[http://getbootstrap.com/css/#grid](http://getbootstrap.com/css/#grid). For each
column `<div>`, you must specify another CSS class called *span[width]* where
*width* is the numerator of a fraction over 12 representing the width of the
column. For example, if you apply a *span8* CSS class to a column `<div>`, the
column will take up `8/12 = 2/3` of the page width. Similarly, a *span3* CSS
class means that the column will take up `1/4` of the page width and a *span12*
CSS means that the column will take up the entire page width.

Next, for each column `<div>`, you need to specify a unique CSS ID. E.g.,
`id="column-1"`, `id="column-2"`, etc.

Finally, inside each column `<div>`, you need to include a Velocity template
directive. This directive is responsible for rendering the portlets that have
been added to each column:

    $processor.processColumn("column-1", "portlet-column-content portlet-column-content-only")

The `processor.processColumn` function takes two arguments. The first is the CSS
column ID and the second is a list of CSS classes. You always need to pass
`"portlet-column-content"` in the second argument. If the column is the first,
last, or only column in a row, you also have to pass both
`"portlet-column-content"` and `portlet-column-content-[first|last|only]` in the second
argument, separated by a space.

Now that we've discussed how layout template TPL files are designed, let's
convert the 1 2 1 column template that we presented above into our 1 4 1 column
template.

![Figure 10.10: You can edit your layout template with an HTML editor in Developer Studio.](../../images/layout-template-tpl-src-almost.png)

1. Change the first CSS class of the root `<div>` from *columns-1-2-1* to
   *columns-1-4-1*.

2. We don't need to change the first row `<div>` since its already set up
   with a single column. We do need to change the second row `<div>` since we
   need to set up four equal width columns. Replace the second row `<div>` with
   the following:

        <div class="portlet-layout row-fluid">
                <div class="portlet-column portlet-column-first span3" id="column-2">
                        $processor.processColumn("column-2", "portlet-column-content portlet-column-content-first")
                </div>

                <div class="portlet-column portlet-column span3" id="column-3">
                        $processor.processColumn("column-3", "portlet-column-content")
                </div>
                
                <div class="portlet-column portlet-column span3" id="column-4">
                        $processor.processColumn("column-4", "portlet-column-content")
                </div>
                
                <div class="portlet-column portlet-column-last span3" id="column-5">
                        $processor.processColumn("column-5", "portlet-column-content portlet-column-content-last")
                </div>
        </div>

3. The find row `<div>` is set up with a single column so the only thing we need
   to change is its ID. Replace it with the following:

        <div class="portlet-layout row-fluid">
                <div class="portlet-column portlet-column-only span12" id="column-6">
                        $processor.processColumn("column-6", "portlet-column-content portlet-column-content-only")
                </div>
        </div>

Just like that, the rows and columns of the *Columns 1 4 1* layout template are
arranged and sized to fit your needs. 

Now that we've generated some positive Feng Shui through the design of our
layout, let's increase our control over the layout by embedding portlets. 

## Embedding Portlets in a Layout Template [](id=embedding-portlets-in-a-layout-template-liferay-portal-6-2-dev-guide-09-en)

Are there portlets you need displayed in the same location on all pages using
a particular layout template? Perhaps you want to prevent others from disrupting
the Feng Shui you've generated with your design? You can embed portlets in
layout templates, ensuring that specified portlets always display in consistent
locations on your pages. Users can minimize embedded portlets but can't move or
remove them. Whether instanceable or non-instanceable, core portlets and custom
portlets you created with the Plugins SDK can be embedded in layout templates. 

Let's embed some portlets in our *Columns 1 4 1* layout template. We'll place
the *navigation portlet* and *search portlet* in the first and last columns of
our layout template's middle row. Additionally, we'll embed a custom portlet in
the template's upper and lower rows. 

First, specify some attributes of the embedded portlet:

- ***Portlet ID:*** The portlet's name, `<portlet-name>`, found in
  `docroot/WEB-INF/portlet.xml`. For core portlets, find the name in
  `liferay-portal/portal-web/docroot/WEB-INF/liferay-portlet.xml`. 
- ***Core vs. Custom:*** Specify whether the portlet is a core portlet or
  custom. 
- ***Instanceable:*** Specify whether multiple instances of the portlet can
  exist in the portal. 
- ***Web Application Context*** - Required for *custom* portlets only. Log into
  your Liferay Portal. Go to the portlet's *Look and Feel* &rarr; *Advanced
  Styling* to find the context in the Fully Qualified Portlet ID (FQPI). The
  context is the portion of the Portlet ID string that follows `WAR_`. The *Web
  Application Context* in the following figure is *myhelloworldportlet*. 

![Figure 10.11: You can view the Fully Qualified Portlet ID (FQPI) in the Advanced Styling tab for a custom portlet.](../../images/layout-template-custom-portlet-look-n-feel.png)

Here's a description of the portlets we're embedding in the layout:

| Portlet      | ID                         | Row | Column | Type   | Instanceable | Context |
-------------- | -------------------------- | --- | ------ | ------ | ------------ | ------- |
 Navigation    | `71`                       | 2   | 1      | core   | yes | N/A |
 Search        | `3`                        | 2   | 4      | core   | no  | N/A |
 Hello World   | `my-hello-world-portlet`   | 1   | 1      | custom | no  | myhelloworldportlet |
 Goodbye World | `my-goodbye-world-portlet` | 3   | 1      | custom | yes | myhelloworldportlet |
---

Here's the TPL that implements embedding of these portlets:

    <div class="columns_1_4_1" id="main-content" role="main">
        <div class="portlet-layout row-fluid">
            <div class="portlet-column portlet-column-only" id="column-1">
                $processor.processPortlet(
                    "my-hello-world-portlet_WAR_myhelloworldportlet")
                $processor.processColumn("column-1",
                    "portlet-column-content portlet-column-content-only")
            </div>
        </div>
        <div class="portlet-layout row-fluid">
            <div class="portlet-column portlet-column-first span3" id="column-2">
                $processor.processPortlet("71_INSTANCE_xyz1")
                $processor.processColumn(
                    "column-2",
                    "portlet-column-content portlet-column-content-first")
            </div>
            <div class="portlet-column span3" id="column-3">
                $processor.processColumn("column-3", "portlet-column-content")
            </div>
            <div class="portlet-column span3" id="column-4">
                $processor.processColumn("column-4", "portlet-column-content")
            </div>
            <div class="portlet-column portlet-column-last span3" id="column-5">
                $processor.processPortlet("3")
                $processor.processColumn(
                    "column-5",
                    "portlet-column-content portlet-column-content-last")
            </div>
        </div>
        <div class="portlet-layout row-fluid">
            <div class="portlet-column portlet-column-only" id="column-6">
                $processor.processPortlet(
                "my-goodbye-world-portlet_WAR_myhelloworldportlet_INSTANCE_jkl1")
                $processor.processColumn(
                    "column-6",
                    "portlet-column-content portlet-column-content-only")
            </div>
        </div>
    </div>

What would a page using our *Columns 1 4 1* layout template look like? Check out
the following figure for a screenshot of our layout template with its embedded
portals. 

![Figure 10.12: Your embedded portlets are now available when viewing your customized layout template.](../../images/layout-template-embed-portlets-visual.png)

See how simple it is to embed portlets in your pages? 

Wouldn't it be nice to have an organized reference of available layout template
variables? You're in luck! We'll dive into available variables next!

## Variables Available to Layout a Template [](id=variables-available-to-layout-a-template-liferay-portal-6-2-dev-guide-09-en)

A number of variables are available for you to use in your custom TPL files. For
your convenience, we've listed all of them in the following table. 

| Variable | Type | Description |
| -------- | ---- | ----------- |
 $processor | com.liferay.portal.layoutconfiguration.util.velocity.TemplateProcessor | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs-all/com/liferay/portal/layoutconfiguration/util/velocity/TemplateProcessor.html) |
 $request | javax.servlet.http.HttpServletRequest| |
 $themeDisplay | com.liferay.portal.theme.ThemeDisplay | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/theme/ThemeDisplay.html) |
 $company | com.liferay.portal.model.Company | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/model/Company.html) |
 $user | com.liferay.portal.model.User | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/model/User.html) |
 $realUser | com.liferay.portal.model.User | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/model/User.html) |
 $layout | com.liferay.portal.model.Layout | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/model/Layout.html) |
 $layouts | java.util.List<com.liferay.portal.model.Layout> ||
 $plid | java.lang.Long ||
 $layoutTypePortlet | com.liferay.portal.model.LayoutTypePortlet | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/model/LayoutTypePortlet.html) |
 $portletGroupId | java.lang.Long ||
 $locale | java.util.Locale ||
 $timeZone| java.util.TimeZone ||
 $theme | com.liferay.taglib.util.VelocityTaglib | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs-all/com/liferay/taglib/util/VelocityTaglib.html) |
 $colorScheme | com.liferay.portal.model.ColorScheme | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/model/ColorScheme.html) |
 $portletDisplay | com.liferay.portal.theme.PortletDisplay | [Javadoc](http://docs.liferay.com/portal/6.2/javadocs/com/liferay/portal/theme/PortletDisplay.html) |
---

Now your layout template toolbox is complete. 

## Summary [](id=summary-liferay-portal-6-2-dev-guide-09-en)

In this chapter, you learned how to customize the look and feel of your Liferay
Portal by creating custom themes. During this process, you created your own
theme, learned about its directory structure, and discovered the value of style
inheritance from a parent theme. You also learned about Liferay's JavaScript
library, AlloyUI, and how to make your theme configurable by adding settings
that portal administrators can manage within Liferay. Your CSS options,
including color schemes, and predefined settings for your theme, were discussed
to round out your understanding of theme development. 

We also created layout templates, arranged their rows and columns, and embedded
portlets in them. Congratulations on mastering the fundamentals of Liferay's
layout templates, but be careful. If your Feng Shui skills become widely known,
your friends may ask you to re-arrange their living room furniture! 

If you're up for it, let's learn how to customize core Liferay portlets using
hooks--sounds "catchy", right?! 
